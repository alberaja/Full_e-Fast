spring.datasource.url=jdbc:mysql://localhost:3306/efast
spring.datasource.username=root
spring.datasource.password=
server.port=8081

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# The SQL dialect makes Hibernate generate better SQL for the chosen database
# comentar con letra 'elle' da fallo
# aja: usar engine=InnoDB para poder ver los FK desde workbench. sin anadir dialect, ya por default lo detecta como engine=InnoDB
	#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
spring.jpa.generate-ddl=true   
#false

# realizar la actualizacion del esquema
# opciones: create, create-drop, validate, update, none
spring.jpa.hibernate.ddl-auto=update
# Crear bbdd efast manualmente. 
# 1era vez: create , luego:
#		create-drop(Create and then destroy the schema at the end of the session.) 
#		validate(valida y no realiza cambios en la BBDD=Validate the schema, make no changes to the database.)
#		update(actualiza el schema si es necesario==NO deberia de borrar registros previos!!)

spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=create
#spring.jpa.properties.hibernate.format_sql=true
#spring.jpa.properties.hibernate.mvc.hiddenmethod.enabled=true

#findByNombreUsuarioNativa() En Repository VehiculoFavRepository,  evitar el fallo de serializacion en Jackson, evita el error  No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.efast.backend.model.VehiculoFavorito["vehicleFavId"]->com.efast.backend.model.Vehiculo$HibernateProxy$8Tj5xrCJ["hibernateLazyInitializer"])
spring.jackson.serialization.fail-on-empty-beans=false
